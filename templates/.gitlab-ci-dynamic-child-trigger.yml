include:
  - remote: 'https://raw.githubusercontent.com/sparkfabrik/spark-k8s-deployer/master/templates/.gitlab-ci-template.yml'

stages:
  - install
  - automation
  - start

# Pipelines does not run on merge request events, only on commits on given branches.
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|main|stage)$/'

variables:
  INSTALL_CACHE_NAME: ${CI_COMMIT_SHORT_SHA}-fs-install
  FLUX_REPO_DEFAULT_BRANCH: main
  FLUX_REPO_BASE_URL: gitlab.sparkfabrik.com/bocconi/gitops/flux-infrastructure.git

install packages:
  stage: install
  script:
    # Move thee original project in a temporary directory
    - mkdir -p /tmp/sources
    - find ${CI_PROJECT_DIR} -mindepth 1 -maxdepth 1 -exec mv {} /tmp/sources \;
    # Init and require sparkfabrik/pkg_drupal
    - 'docker run -t -v ${CI_PROJECT_DIR}:/app -w /app -e COMPOSER_AUTH eu.gcr.io/spark-int-cloud-services/fs-cli:latest pkg:init pkg-init-dir ${CI_PROJECT_NAME} spark ${CI_PROJECT_ID}'
    - 'docker run -t -v ${CI_PROJECT_DIR}:/app -w /app/pkg-init-dir -e COMPOSER_AUTH eu.gcr.io/spark-int-cloud-services/fs-cli:latest pkg:require sparkfabrik/pkg_drupal'
    - find ${CI_PROJECT_DIR}/pkg-init-dir -mindepth 1 -maxdepth 1 -exec mv {} ${CI_PROJECT_DIR} \;
    # Clean the src/drupal folder from unwanted files
    - cd ${CI_PROJECT_DIR}/src/drupal && rm -rf behat.yml build.xml composer.* config features phpunit.xml reports web
    - cd ${CI_PROJECT_DIR}
    # Move the original project in the final folder
    - find /tmp/sources -mindepth 1 -maxdepth 1 -exec mv {} ${CI_PROJECT_DIR}/src/drupal \;
    # Patch composer.json
    - docker run --rm -v ${CI_PROJECT_DIR}/src/drupal:/app composer:2.1.11 config bin-dir bin/
    # Test the composer patch
    - 'cat ${CI_PROJECT_DIR}/src/drupal/composer.json | grep "\"bin-dir\": \"bin\/\""'
    # Test artifact path
    - export TEST_PATH=${CI_PROJECT_DIR}/tmp/tmp1/tmp2 && export TEST_FILE="${TEST_PATH}/test.txt" && mkdir -p "${TEST_PATH}" && touch "${TEST_FILE}"
  cache:
    key: ${INSTALL_CACHE_NAME}
    paths: 
      - ${CI_PROJECT_DIR}
    policy: push
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/pkg/sparkfabrik/pkg_base/infrastructure/gitlab-ci.yml
      - ${CI_PROJECT_DIR}/pkg/sparkfabrik/pkg_drupal/infrastructure/gitlab-ci.yml
      - ${TEST_FILE}

prepare automation:
  stage: automation
  script:
    # Define local env vars for the destination repo.
    - export PRE_GIT_PWD="${PWD}"
    - export REPO_DIR="/tmp/flux_infrastructure"
    - export TEMPLATES_DIR="${CI_PROJECT_DIR}/flux-templates"
    - 'export DESTINATION_REPO_GIT_URL="https://${FLUX_USER}:${FLUX_ACCESS_TOKEN}@${FLUX_REPO_BASE_URL}"'
    # Clone flux repo.
    - mkdir -p ${REPO_DIR}
    - cd ${REPO_DIR}
    - git config --global user.email "gitlab-gitops-bot@sparkfabrik.cloud"
    - git config --global user.name "Gitlab Bot"
    - git clone ${DESTINATION_REPO_GIT_URL} ${REPO_DIR}
    # Switch on current default branch
    - git reset --hard origin/${FLUX_REPO_DEFAULT_BRANCH} || true
    - cp -av "${REPO_DIR}/templates" "${TEMPLATES_DIR}"
    - cd "${PRE_GIT_PWD}"
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/flux-templates/pkgs/.gitlab-ci-project.yml
  cache:
    key: ${INSTALL_CACHE_NAME}
    paths: 
      - ${CI_PROJECT_DIR}

start automation:
  stage: start
  variables:
    DRUPAL_PHPQA_ENABLE: 0
  trigger:
    include:
    # NOTE: it seems that we can only add at max 3 artifacts.
      - artifact: pkg/sparkfabrik/pkg_base/infrastructure/gitlab-ci.yml
        job: install packages
      - artifact: pkg/sparkfabrik/pkg_drupal/infrastructure/gitlab-ci.yml
        job: install packages
      - artifact: flux-templates/pkgs/.gitlab-ci-project.yml
        job: prepare automation

# .trigger-deploy-automation:
#   stage: start
#   script:
#   - curl --request POST
#     --form token=${AUTOMATION_TRIGGER_TOKEN} 
#     --form ref=${AUTOMATION_BRANCH}
#     --form "variables[CI_COMMIT_REF_SLUG]=${CI_COMMIT_REF_SLUG}"
#     --form "variables[CI_PROJECT_ID]=${CI_PROJECT_ID}"
#     --form "variables[CI_PROJECT_NAME]=${CI_PROJECT_NAME}"
#     --form "variables[DRUPAL_PHPQA_ENABLE]=${PHPQA_ENABLE}"
#     --form "variables[HTTPS_REPO_URL]=${CI_REPOSITORY_URL}"
#     --form "variables[CI_COMMIT_SHA]=${CI_COMMIT_SHA}"
#     --form "variables[PKG_DRUPAL_CI_ENVIRONMENT_BASE_URL]=${CI_ENVIRONMENT_BASE_URL}"
#     "https://gitlab.sparkfabrik.com/api/v4/projects/${AUTOMATION_PROJECT_ID}/trigger/pipeline"

# trigger stage deploy:
#   extends: .trigger-deploy-automation
#   variables:
#     CI_ENVIRONMENT_BASE_URL: ${STAGE_CI_ENVIRONMENT_BASE_URL}
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "stage"'

# trigger production deploy:
#   extends: .trigger-deploy-automation
#   variables:
#     CI_ENVIRONMENT_BASE_URL: ${PRODUCTION_CI_ENVIRONMENT_BASE_URL}
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
