include:
  - remote: 'https://raw.githubusercontent.com/sparkfabrik/spark-k8s-deployer/master/templates/.gitlab-ci-template.yml'

stages:
  - generate-pipeline
  - start

# Pipelines does not run on merge request events.
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(develop|main|stage)$/'

variables:
  CACHE_NAME: ${CI_PIPELINE_ID}

install packages:
  stage: generate-pipeline
  script:
    - 'docker run -v ${CI_PROJECT_DIR}:/app -w /app -e COMPOSER_AUTH eu.gcr.io/spark-int-cloud-services/fs-cli:latest "pkg:init pkg-init-dir ${CI_PROJECT_NAME} spark ${CI_PROJECT_ID}"'
    - 'docker run -v ${CI_PROJECT_DIR}:/app -w /app/pkg-init-dir -e COMPOSER_AUTH eu.gcr.io/spark-int-cloud-services/fs-cli:latest "pkg:require sparkfabrik/pkg_drupal"'
    - 'echo -n "print job:\n\tstage: .pre\n\tscript:\n\t\t- sleep 3600\n" > .gitlab-ci.yml'
  cache:
    key: ${CACHE_NAME}
    paths: 
      - ${CI_PROJECT_DIR}
  artifacts:
    paths:
      - .gitlab-ci.yml
      
start pipeline artifact:
  stage: start
  cache:
    key: ${CACHE_NAME}
    paths: 
      - ${CI_PROJECT_DIR}
    policy: pull
  trigger:
    include:
      - artifact: .gitlab-ci.yml
        job: install packages

start pipeline cache:
  stage: start
  cache:
    key: ${CACHE_NAME}
    paths: 
      - ${CI_PROJECT_DIR}
    policy: pull
  trigger:
    include: .gitlab-ci.yml

# .trigger-deploy-automation:
#   stage: start
#   script:
#   - curl --request POST
#     --form token=${AUTOMATION_TRIGGER_TOKEN} 
#     --form ref=${AUTOMATION_BRANCH}
#     --form "variables[CI_COMMIT_REF_SLUG]=${CI_COMMIT_REF_SLUG}"
#     --form "variables[CI_PROJECT_ID]=${CI_PROJECT_ID}"
#     --form "variables[CI_PROJECT_NAME]=${CI_PROJECT_NAME}"
#     --form "variables[DRUPAL_PHPQA_ENABLE]=${PHPQA_ENABLE}"
#     --form "variables[HTTPS_REPO_URL]=${CI_REPOSITORY_URL}"
#     --form "variables[CI_COMMIT_SHA]=${CI_COMMIT_SHA}"
#     --form "variables[PKG_DRUPAL_CI_ENVIRONMENT_BASE_URL]=${CI_ENVIRONMENT_BASE_URL}"
#     "https://gitlab.sparkfabrik.com/api/v4/projects/${AUTOMATION_PROJECT_ID}/trigger/pipeline"

# trigger stage deploy:
#   extends: .trigger-deploy-automation
#   variables:
#     CI_ENVIRONMENT_BASE_URL: ${STAGE_CI_ENVIRONMENT_BASE_URL}
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "stage"'

# trigger production deploy:
#   extends: .trigger-deploy-automation
#   variables:
#     CI_ENVIRONMENT_BASE_URL: ${PRODUCTION_CI_ENVIRONMENT_BASE_URL}
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
